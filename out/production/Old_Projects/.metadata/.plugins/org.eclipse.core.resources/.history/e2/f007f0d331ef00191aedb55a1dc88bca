package bfs;

import java.util.LinkedList;
import java.util.Queue;

public class Tree {

	Node root;
	static int leftNodes=0;
	static int rightNodes=0;
	Queue<Node> que = new LinkedList<Node>();

	public Tree(Node root) {
		this.root = root;
	}

	void InOrderTraversal(Node root1) {
		if (root1 == null)
			return;

		if (root1.left != null) {
			InOrderTraversal(root1.left);
		}

		System.out.println(root1.data + " ");

		if (root1.right != null) {
			InOrderTraversal(root1.right);
		}
	}

	void LevelOrderTraversal(Node root2) {
		if (root2 == null)
			return;
		que.add(root2);

		while (!que.isEmpty()) {
			Node x = que.remove();
			System.out.println(x.data);

			if (x.left != null) {
				que.add(x.left);
			}
			if (x.right != null) {
				que.add(x.right);
			}
		}

	}

	void add_Old(Node root, Node node) {
		if (root == null || node == null || root.data == node.data)
			return;

		if (root.data < node.data) {
			if (root.right == null) {
				root.right = node;
				return;
			} else {
				add_Old(root.right, node);
			}

		} else {

			if (root.left == null) {
				root.left = node;
				return;
			}

			else {
				add_Old(root.left, node);
			}

		}

	}

	boolean add(Node node) {
		if (root == null || node == null || root.data == node.data)
			return false;

		// I am creating a left dominant tree

		if (root.left == null) {
			root.left = node;
			return true;
		}

		if (root.right == null) {
			root.right = node;
			return true;
		}

		if(leftNodes < rightNodes) {
			return add(root.left);
		}
		else {
			return add(root.right);
		}


	}

	public Node getRoot() {
		return root;
	}

}
