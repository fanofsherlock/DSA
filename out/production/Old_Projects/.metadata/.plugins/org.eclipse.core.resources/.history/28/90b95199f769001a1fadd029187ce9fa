package Misc;

public class Ibit_ContainerWithMostWater {
	class Wall{
        int index;
        int value;
        Wall(int index, int value){
            this.index=index;
            this.value=value;
        }
    }
    
    public int maxArea(ArrayList<Integer> A) {
        if(A==null||A.size()<3){
            return 0;
        }
        Wall[] leftMax = new Wall[A.size()];
        leftMax[0]=new Wall(-1,0);
        
        int maxHeight=A.get(0);
        int maxIndex=0;
        
        for(int i=1;i<A.size();i++){
            if(maxHeight<A.get(i)){
                maxIndex=i;
                maxHeight=A.get(i);
            }
            
            leftMax[i]=new Wall(maxIndex,maxHeight);
        }
        
        
        Wall[] rightMax = new Wall[A.size()];
        rightMax[A.size()-1]=new Wall(-1,0);
        maxHeight=A.get(A.size()-1);
        maxIndex=A.size()-1;
        
        for(int i=A.size()-2;i>=0;i--){
            if(maxHeight<A.get(i)){
                maxIndex=i;
                maxHeight=A.get(i);
            }
            
            rightMax[i]=new Wall(maxIndex,maxHeight);
        }
        

        int maxArea=Integer.MIN_VALUE;
        int base=0;
        for(int i=1;i<A.size()-1;i++){
           maxHeight=Math.min(leftMax[i].value,rightMax[i].value);
           base=rightMax[i].index-leftMax[i].index;
           maxArea=Math.max(maxArea,maxHeight*base);
        }
        
        return maxArea;
    }

}
